package com.llego.business.ui.screens

// import androidx.compose.animation.animateFloatAsState  // TODO: Habilitar cuando esté soportado en KMP
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import com.llego.shared.data.model.*
import com.llego.shared.ui.auth.AuthViewModel
import com.llego.shared.ui.components.atoms.*
import com.llego.shared.ui.theme.LlegoCustomShapes

/**
 * Pantalla de perfil para negocios con logout funcional
 * Muestra información del negocio y opciones de configuración
 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BusinessProfileScreen(
    onLogout: () -> Unit,
    modifier: Modifier = Modifier,
    authViewModel: AuthViewModel = viewModel()
) {
    val uiState by authViewModel.uiState.collectAsStateWithLifecycle()
    val user = uiState.currentUser
    val businessProfile = user?.businessProfile

    var showLogoutDialog by remember { mutableStateOf(false) }

    // Animación de entrada - TODO: Implementar con animaciones cuando sea soportado en KMP
    val fadeInAnimation = 1f // by animateFloatAsState(
        // targetValue = 1f,
        // animationSpec = tween(800, easing = EaseOutCubic),
        // label = "fade_in"
    // )

    if (showLogoutDialog) {
        LogoutConfirmationDialog(
            onConfirm = {
                showLogoutDialog = false
                authViewModel.logout()
                onLogout()
            },
            onDismiss = { showLogoutDialog = false }
        )
    }

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .verticalScroll(rememberScrollState())
            .padding(24.dp)
    ) {
        // Header con información básica
        BusinessProfileHeader(
            user = user,
            businessProfile = businessProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Estadísticas del negocio
        BusinessStatsSection(
            businessProfile = businessProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Opciones de perfil
        ProfileOptionsSection(
            onLogoutClick = { showLogoutDialog = true },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))
    }
}

@Composable
private fun BusinessProfileHeader(
    user: User?,
    businessProfile: BusinessProfile?,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Avatar del negocio
            Box(
                modifier = Modifier
                    .size(80.dp)
                    .clip(CircleShape)
                    .background(MaterialTheme.colorScheme.primary),
                contentAlignment = Alignment.Center
            ) {
                if (businessProfile?.logo != null) {
                    // TODO: Cargar imagen del logo
                    Text(
                        text = businessProfile.businessName.firstOrNull()?.toString() ?: "N",
                        style = MaterialTheme.typography.headlineMedium.copy(
                            color = MaterialTheme.colorScheme.onPrimary,
                            fontWeight = FontWeight.Bold
                        )
                    )
                } else {
                    Text(
                        text = businessProfile?.businessName?.firstOrNull()?.toString() ?: "N",
                        style = MaterialTheme.typography.headlineMedium.copy(
                            color = MaterialTheme.colorScheme.onPrimary,
                            fontWeight = FontWeight.Bold
                        )
                    )
                }
            }

            // Información del negocio
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = businessProfile?.businessName ?: "Negocio",
                    style = MaterialTheme.typography.headlineSmall.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    textAlign = TextAlign.Center
                )

                Text(
                    text = businessProfile?.businessType?.name?.lowercase()?.replaceFirstChar { it.uppercase() } ?: "Negocio",
                    style = MaterialTheme.typography.bodyMedium.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )

                // Estado de verificación
                if (businessProfile?.isVerified == true) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Check,
                            contentDescription = "Verificado",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(16.dp)
                        )
                        Text(
                            text = "Negocio Verificado",
                            style = MaterialTheme.typography.labelSmall.copy(
                                color = MaterialTheme.colorScheme.primary,
                                fontWeight = FontWeight.Medium
                            )
                        )
                    }
                }
            }

            // Información de contacto
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = user?.email ?: "",
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
                Text(
                    text = businessProfile?.businessPhone ?: user?.phone ?: "",
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
            }
        }
    }
}

@Composable
private fun BusinessStatsSection(
    businessProfile: BusinessProfile?,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Estadísticas del Negocio",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            StatCard(
                title = "Pedidos Totales",
                value = businessProfile?.totalOrders?.toString() ?: "0",
                icon = Icons.Default.ShoppingCart,
                modifier = Modifier.weight(1f)
            )

            StatCard(
                title = "Calificación",
                value = "${businessProfile?.averageRating ?: 0.0}",
                icon = Icons.Default.Star,
                modifier = Modifier.weight(1f)
            )
        }

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            StatCard(
                title = "Radio Entrega",
                value = "${businessProfile?.deliveryRadius ?: 0.0} km",
                icon = Icons.Default.LocationOn,
                modifier = Modifier.weight(1f)
            )

            StatCard(
                title = "Estado",
                value = if (businessProfile?.isVerified == true) "Activo" else "Pendiente",
                icon = Icons.Default.Store,
                modifier = Modifier.weight(1f)
            )
        }
    }
}

@Composable
private fun StatCard(
    title: String,
    value: String,
    icon: ImageVector,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = title,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            Text(
                text = value,
                style = MaterialTheme.typography.titleMedium.copy(
                    fontWeight = FontWeight.Bold
                )
            )
            Text(
                text = title,
                style = MaterialTheme.typography.bodySmall.copy(
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                ),
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun ProfileOptionsSection(
    onLogoutClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Configuración",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        ProfileOptionItem(
            title = "Editar Perfil",
            subtitle = "Actualizar información del negocio",
            icon = Icons.Default.Edit,
            onClick = { /* TODO: Implementar edición de perfil */ }
        )

        ProfileOptionItem(
            title = "Configuración",
            subtitle = "Preferencias y notificaciones",
            icon = Icons.Default.Settings,
            onClick = { /* TODO: Implementar configuración */ }
        )

        ProfileOptionItem(
            title = "Ayuda y Soporte",
            subtitle = "Obtener ayuda o contactar soporte",
            icon = Icons.Default.Info,
            onClick = { /* TODO: Implementar ayuda */ }
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Botón de logout
        LlegoButton(
            text = "Cerrar Sesión",
            onClick = onLogoutClick,
            variant = LlegoButtonVariant.OUTLINE,
            size = LlegoButtonSize.LARGE,
            modifier = Modifier.fillMaxWidth()
        )
    }
}

@Composable
private fun ProfileOptionItem(
    title: String,
    subtitle: String,
    icon: ImageVector,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        onClick = onClick
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = title,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )

            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleSmall.copy(
                        fontWeight = FontWeight.Medium
                    )
                )
                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
            }

            Icon(
                imageVector = Icons.Default.ArrowForward,
                contentDescription = "Ir a $title",
                tint = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

@Composable
private fun LogoutConfirmationDialog(
    onConfirm: () -> Unit,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = "Cerrar Sesión",
                style = MaterialTheme.typography.titleLarge.copy(
                    fontWeight = FontWeight.Bold
                )
            )
        },
        text = {
            Text(
                text = "¿Estás seguro de que quieres cerrar sesión?",
                style = MaterialTheme.typography.bodyMedium
            )
        },
        confirmButton = {
            LlegoButton(
                text = "Cerrar Sesión",
                onClick = onConfirm,
                variant = LlegoButtonVariant.PRIMARY,
                size = LlegoButtonSize.MEDIUM
            )
        },
        dismissButton = {
            LlegoButton(
                text = "Cancelar",
                onClick = onDismiss,
                variant = LlegoButtonVariant.TEXT,
                size = LlegoButtonSize.MEDIUM
            )
        }
    )
}