package com.llego.driver.ui.screens

// import androidx.compose.animation.animateFloatAsState  // TODO: Habilitar cuando esté soportado en KMP
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import com.llego.shared.data.model.*
import com.llego.shared.ui.auth.AuthViewModel
import com.llego.shared.ui.components.atoms.*
import com.llego.shared.ui.theme.LlegoCustomShapes

/**
 * Pantalla de perfil para choferes/mensajeros con logout funcional
 * Muestra información del conductor y estadísticas de entregas
 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DriverProfileScreen(
    onLogout: () -> Unit,
    modifier: Modifier = Modifier,
    authViewModel: AuthViewModel = viewModel()
) {
    val uiState by authViewModel.uiState.collectAsStateWithLifecycle()
    val user = uiState.currentUser
    val driverProfile = user?.driverProfile

    var showLogoutDialog by remember { mutableStateOf(false) }

    // Animación de entrada - TODO: Implementar con animaciones cuando sea soportado en KMP
    val fadeInAnimation = 1f // by animateFloatAsState(
        // targetValue = 1f,
        // animationSpec = tween(800, easing = EaseOutCubic),
        // label = "fade_in"
    // )

    if (showLogoutDialog) {
        LogoutConfirmationDialog(
            onConfirm = {
                showLogoutDialog = false
                authViewModel.logout()
                onLogout()
            },
            onDismiss = { showLogoutDialog = false }
        )
    }

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .verticalScroll(rememberScrollState())
            .padding(24.dp)
    ) {
        // Header con información básica
        DriverProfileHeader(
            user = user,
            driverProfile = driverProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Estadísticas del conductor
        DriverStatsSection(
            driverProfile = driverProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Información del vehículo
        VehicleInfoSection(
            driverProfile = driverProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Estado de documentos
        DocumentsStatusSection(
            driverProfile = driverProfile,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Opciones de perfil
        ProfileOptionsSection(
            onLogoutClick = { showLogoutDialog = true },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(32.dp))
    }
}

@Composable
private fun DriverProfileHeader(
    user: User?,
    driverProfile: DriverProfile?,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Avatar del conductor
            Box(
                modifier = Modifier
                    .size(80.dp)
                    .clip(CircleShape)
                    .background(MaterialTheme.colorScheme.primary),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = user?.name?.firstOrNull()?.toString() ?: "C",
                    style = MaterialTheme.typography.headlineMedium.copy(
                        color = MaterialTheme.colorScheme.onPrimary,
                        fontWeight = FontWeight.Bold
                    )
                )
            }

            // Información del conductor
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = user?.name ?: "Conductor",
                    style = MaterialTheme.typography.headlineSmall.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    textAlign = TextAlign.Center
                )

                // Estado online/offline
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .size(12.dp)
                            .clip(CircleShape)
                            .background(
                                if (driverProfile?.isOnline == true)
                                    MaterialTheme.colorScheme.primary
                                else
                                    MaterialTheme.colorScheme.onSurfaceVariant
                            )
                    )
                    Text(
                        text = if (driverProfile?.isOnline == true) "En línea" else "Desconectado",
                        style = MaterialTheme.typography.bodyMedium.copy(
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    )
                }

                // Estado de verificación
                if (driverProfile?.isVerified == true) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Check,
                            contentDescription = "Verificado",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(16.dp)
                        )
                        Text(
                            text = "Conductor Verificado",
                            style = MaterialTheme.typography.labelSmall.copy(
                                color = MaterialTheme.colorScheme.primary,
                                fontWeight = FontWeight.Medium
                            )
                        )
                    }
                }
            }

            // Información de contacto
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = user?.email ?: "",
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
                Text(
                    text = user?.phone ?: "",
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
            }
        }
    }
}

@Composable
private fun DriverStatsSection(
    driverProfile: DriverProfile?,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Estadísticas de Entregas",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            StatCard(
                title = "Entregas Totales",
                value = driverProfile?.totalDeliveries?.toString() ?: "0",
                icon = Icons.Default.DirectionsCar,
                modifier = Modifier.weight(1f)
            )

            StatCard(
                title = "Calificación",
                value = "${driverProfile?.averageRating ?: 0.0}",
                icon = Icons.Default.Star,
                modifier = Modifier.weight(1f)
            )
        }
    }
}

@Composable
private fun VehicleInfoSection(
    driverProfile: DriverProfile?,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Información del Vehículo",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = LlegoCustomShapes.infoCard,
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(20.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                VehicleInfoRow(
                    label = "Tipo",
                    value = driverProfile?.vehicleType?.name?.lowercase()?.replaceFirstChar { it.uppercase() } ?: "No especificado"
                )
                VehicleInfoRow(
                    label = "Placa",
                    value = driverProfile?.vehiclePlate ?: "No especificada"
                )
                VehicleInfoRow(
                    label = "Modelo",
                    value = driverProfile?.vehicleModel ?: "No especificado"
                )
                VehicleInfoRow(
                    label = "Color",
                    value = driverProfile?.vehicleColor ?: "No especificado"
                )
            }
        }
    }
}

@Composable
private fun VehicleInfoRow(
    label: String,
    value: String,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium.copy(
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium.copy(
                fontWeight = FontWeight.Medium
            )
        )
    }
}

@Composable
private fun DocumentsStatusSection(
    driverProfile: DriverProfile?,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Estado de Documentos",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = LlegoCustomShapes.infoCard,
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(20.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                DocumentStatusRow(
                    label = "Licencia de Conducir",
                    status = driverProfile?.documentsStatus?.driverLicense ?: DocumentStatus.PENDING
                )
                DocumentStatusRow(
                    label = "Registro del Vehículo",
                    status = driverProfile?.documentsStatus?.vehicleRegistration ?: DocumentStatus.PENDING
                )
                DocumentStatusRow(
                    label = "Seguro",
                    status = driverProfile?.documentsStatus?.insurance ?: DocumentStatus.PENDING
                )
                DocumentStatusRow(
                    label = "Verificación de Antecedentes",
                    status = driverProfile?.documentsStatus?.backgroundCheck ?: DocumentStatus.PENDING
                )
            }
        }
    }
}

@Composable
private fun DocumentStatusRow(
    label: String,
    status: DocumentStatus,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium
        )

        DocumentStatusChip(status = status)
    }
}

@Composable
private fun DocumentStatusChip(
    status: DocumentStatus,
    modifier: Modifier = Modifier
) {
    val (backgroundColor, textColor, text) = when (status) {
        DocumentStatus.APPROVED -> Triple(
            MaterialTheme.colorScheme.primaryContainer,
            MaterialTheme.colorScheme.onPrimaryContainer,
            "Aprobado"
        )
        DocumentStatus.PENDING -> Triple(
            MaterialTheme.colorScheme.surfaceVariant,
            MaterialTheme.colorScheme.onSurfaceVariant,
            "Pendiente"
        )
        DocumentStatus.REJECTED -> Triple(
            MaterialTheme.colorScheme.errorContainer,
            MaterialTheme.colorScheme.onErrorContainer,
            "Rechazado"
        )
        DocumentStatus.EXPIRED -> Triple(
            MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.7f),
            MaterialTheme.colorScheme.onErrorContainer,
            "Expirado"
        )
    }

    Box(
        modifier = modifier
            .background(
                color = backgroundColor,
                shape = LlegoCustomShapes.circular
            )
            .padding(horizontal = 12.dp, vertical = 4.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = text,
            style = MaterialTheme.typography.labelSmall.copy(
                color = textColor,
                fontWeight = FontWeight.Medium
            )
        )
    }
}

@Composable
private fun StatCard(
    title: String,
    value: String,
    icon: ImageVector,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = title,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            Text(
                text = value,
                style = MaterialTheme.typography.titleMedium.copy(
                    fontWeight = FontWeight.Bold
                )
            )
            Text(
                text = title,
                style = MaterialTheme.typography.bodySmall.copy(
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                ),
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun ProfileOptionsSection(
    onLogoutClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Configuración",
            style = MaterialTheme.typography.titleLarge.copy(
                fontWeight = FontWeight.Bold
            )
        )

        ProfileOptionItem(
            title = "Editar Perfil",
            subtitle = "Actualizar información personal",
            icon = Icons.Default.Edit,
            onClick = { /* TODO: Implementar edición de perfil */ }
        )

        ProfileOptionItem(
            title = "Configuración",
            subtitle = "Preferencias y notificaciones",
            icon = Icons.Default.Settings,
            onClick = { /* TODO: Implementar configuración */ }
        )

        ProfileOptionItem(
            title = "Ayuda y Soporte",
            subtitle = "Obtener ayuda o contactar soporte",
            icon = Icons.Default.Info,
            onClick = { /* TODO: Implementar ayuda */ }
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Botón de logout
        LlegoButton(
            text = "Cerrar Sesión",
            onClick = onLogoutClick,
            variant = LlegoButtonVariant.OUTLINE,
            size = LlegoButtonSize.LARGE,
            modifier = Modifier.fillMaxWidth()
        )
    }
}

@Composable
private fun ProfileOptionItem(
    title: String,
    subtitle: String,
    icon: ImageVector,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        shape = LlegoCustomShapes.infoCard,
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        onClick = onClick
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = title,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )

            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleSmall.copy(
                        fontWeight = FontWeight.Medium
                    )
                )
                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodySmall.copy(
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                )
            }

            Icon(
                imageVector = Icons.Default.ArrowForward,
                contentDescription = "Ir a $title",
                tint = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

@Composable
private fun LogoutConfirmationDialog(
    onConfirm: () -> Unit,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = "Cerrar Sesión",
                style = MaterialTheme.typography.titleLarge.copy(
                    fontWeight = FontWeight.Bold
                )
            )
        },
        text = {
            Text(
                text = "¿Estás seguro de que quieres cerrar sesión?",
                style = MaterialTheme.typography.bodyMedium
            )
        },
        confirmButton = {
            LlegoButton(
                text = "Cerrar Sesión",
                onClick = onConfirm,
                variant = LlegoButtonVariant.PRIMARY,
                size = LlegoButtonSize.MEDIUM
            )
        },
        dismissButton = {
            LlegoButton(
                text = "Cancelar",
                onClick = onDismiss,
                variant = LlegoButtonVariant.TEXT,
                size = LlegoButtonSize.MEDIUM
            )
        }
    )
}